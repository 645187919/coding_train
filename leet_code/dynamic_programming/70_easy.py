#!/usr/bin/env python 
# -*- coding: utf-8 -*- 
# @Time : 2021-09-22 20:49 
# @Author : magician 
# @File : 70_easy.py 
# @Software: PyCharm




# 70. 爬楼梯
# 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
# 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
#
# 注意：给定 n 是一个正整数。
# 示例 1：
# 输入： 2
# 输出： 2
# 解释： 有两种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶
# 2.  2 阶
# 示例 2：
# 输入： 3
# 输出： 3
# 解释： 有三种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶 + 1 阶
# 2.  1 阶 + 2 阶
# 3.  2 阶 + 1 阶

#动态规划的套路：
#1. 确定dp数组以及下标的含义：dp[i]： 爬到第i层楼梯，有dp[i]种⽅法
#2. 确定递推公式 ：dp[i] = dp[i - 1] + dp[i - 2]
#3.dp数组如何初始化：dp[1] = 1，dp[2] = 2
#4. 确定遍历顺序 ：dp[i] = dp[i - 1] + dp[i - 2];中可以看出，遍历顺序⼀定是从前向后遍历的
#5.举例推导dp数组


#详情可参考有道笔记：动态规划（代码随想录）

class Solution:
    def climbStairs(self, n: int) -> int:
        #特殊情况
        if n<=2:
            return n
        #创建dp数据（由于n个台阶且索引为0的元素未被使用，所以需要创建n+1个元素）
        lis=[-1]*(n+1)
        #dp数组的初始化
        lis[1]=1
        lis[2]=2
        #
        for i in range(3,n+1):
            #递推公式
            lis[i]=lis[i-1]+lis[i-2]

        return lis[n]







